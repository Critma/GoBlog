basePath: /api/v1
consumes:
- application/json
definitions:
  main.CommentOnlyText:
    properties:
      text:
        type: string
    type: object
  main.CreateArticlePayload:
    properties:
      content:
        maxLength: 100
        type: string
      title:
        maxLength: 100
        type: string
    required:
    - content
    - title
    type: object
  main.ToLoginPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 7
        type: string
    required:
    - email
    - password
    type: object
  main.ToRegisterPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 7
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UpdateArticlePayload:
    properties:
      content:
        maxLength: 1000
        type: string
      title:
        maxLength: 100
        type: string
    type: object
  store.Article:
    properties:
      author_id:
        type: integer
      content:
        type: string
      id:
        type: integer
      likes:
        type: integer
      published_at:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/store.User'
    type: object
  store.Comment:
    properties:
      article_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      text:
        type: string
      user_id:
        type: integer
    type: object
  store.LatestArticle:
    properties:
      author_name:
        type: string
      id:
        type: integer
      likes:
        type: integer
      published_at:
        type: string
      title:
        type: string
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
info:
  contact: {}
  description: API server for GoBlog web application.
  termsOfService: http://swagger.io/terms/
  title: GoBlog API
  version: 1.0.0
paths:
  /articles:
    get:
      consumes:
      - application/json
      description: Get latest articles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.LatestArticle'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get latest articles
      tags:
      - articles
    post:
      consumes:
      - application/json
      description: Create article
      parameters:
      - description: Article
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/main.CreateArticlePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Article'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create article
      tags:
      - articles
  /articles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete article
      tags:
      - articles
    get:
      consumes:
      - application/json
      description: Get article by id
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Article'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get article by id
      tags:
      - articles
    patch:
      consumes:
      - application/json
      description: Update article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Article
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/main.UpdateArticlePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update article
      tags:
      - articles
  /articles/{id}/comments:
    get:
      consumes:
      - application/json
      description: Get comments of article by id
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Comment'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get comments of article by id
      tags:
      - articles
    post:
      consumes:
      - application/json
      description: Create comment
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/main.CommentOnlyText'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: integer
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create comment
      tags:
      - articles
  /articles/{id}/like:
    post:
      consumes:
      - application/json
      description: set like on article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: set like on article
      tags:
      - articles
  /articles/author/{id}:
    get:
      consumes:
      - application/json
      description: Get articles by user id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Article'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get articles by user id
      tags:
      - articles
  /auth/log:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.ToLoginPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Login user
      tags:
      - auth
  /auth/reg:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.ToRegisterPayload'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Register user
      tags:
      - auth
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Get user by ID
      tags:
      - users
produces:
- application/json
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
